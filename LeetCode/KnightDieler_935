class Solution {
public:
    int knightDialer(int n) {
        int mod = pow(10, 9) + 7;
        std::vector<int64_t> dp(10, 1);
        std::vector<int64_t> tmp(10);
        for (int j = 0; j < n-1; j++) {
            tmp[0] = (dp[4] + dp[6]) % mod;
            tmp[1] = (dp[6] + dp[8]) % mod;
            tmp[2] = (dp[7] + dp[9]) % mod;
            tmp[3] = (dp[4] + dp[8]) % mod;
            tmp[4] = (dp[3] + dp[9] + dp[0]) % mod;
            tmp[5] = 0;
            tmp[6] = (dp[3] + dp[9] + dp[0]) % mod;
            tmp[7] = (dp[2] + dp[6]) % mod;
            tmp[8] = (dp[1] + dp[3]) % mod;
            tmp[9] = (dp[2] + dp[4]) % mod;
            for (int i = 0; i < 10; i++) {
                dp[i] = tmp[i];
            }
        }
        int64_t x = std::accumulate(dp.begin(), dp.end(), static_cast<int64_t>(0));
        return x % mod;
    }
};

